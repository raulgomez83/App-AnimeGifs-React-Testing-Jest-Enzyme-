{"version":3,"sources":["componentes/AddCategory.js","helpers.js","componentes/GifGridItem.js","componentes/GifGrid.js","hooks/useFetchGifs.js","GEApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","newCategories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GEApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACtCC,EADsC,KAC1BC,EAD0B,KAa5C,OACI,6BACA,0BAAMC,SARS,SAACC,GACjBA,EAAEC,iBACDJ,EAAWK,OAAOC,OAAO,GAC1BR,GAAc,SAAAS,GAAa,OAAGP,GAAH,mBAAiBO,SAMzC,2BAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAbrB,SAACP,GACrBF,EAAcE,EAAEQ,OAAOF,a,uBCNhBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,0DAC2CC,UAAUH,GADrD,sDAEDI,MAAMF,GAFL,cAEZG,EAFY,gBAGEA,EAAIC,OAHN,uBAGXC,EAHW,EAGXA,KAEDC,EAAKD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EAClB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAT1B,kBAYVM,GAZU,4CAAD,sDCARO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,yBAAKc,UAAU,wBACZ,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFFO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFV,SAACA,GAAc,IAAD,EAEhBd,mBAAS,CAChCqB,KAAK,GACLa,SAAQ,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAiB3C,OAVIC,qBAAW,WACRxB,EAAQC,GACPwB,MAAK,SAAAX,GACFS,EAAS,CACLf,KAAKM,EACLO,SAAQ,SAGjB,CAACpB,IAEAqB,EDZwBI,CAAazB,GAA/Ba,EAH0B,EAG/BN,KAAYa,EAHmB,EAGnBA,QAIhB,OAAQ,wCACR,4BAAKpB,GACHoB,EACF,yBAAKJ,UAAU,aAEdH,EAAOJ,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEdzBiB,EAAQ,WAAO,IAAD,EAEWzC,mBAAS,CAAC,cAFrB,mBAEhB0C,EAFgB,KAEJ3C,EAFI,KAO1B,OACO,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAErC,4BACG2C,EAAWnB,KAAI,SAAAT,GAAQ,OACxB,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,U,MCZvC6B,IAASC,OAAQ,kBAAC,EAAD,MACbC,SAASC,eAAe,U","file":"static/js/main.5a65e7cc.chunk.js","sourcesContent":["import React , {useState} from 'react'\nimport PropTypes from \"prop-types\"\n\n\nexport const AddCategory = ({setCategories}) => {\n   const [inputValue, setInputValue]= useState(\"\")\n\n   const handleInputChange=(e)=>{\n       setInputValue(e.target.value)\n   }\n\n   const handleSubmit =(e)=>{\n       e.preventDefault( )\n     if(inputValue.trim().length>2){\n       setCategories(newCategories=>[inputValue,...newCategories,])\n   }}\n\n    return (\n        <div>\n        <form onSubmit={handleSubmit}>\n          <input type=\"text\" value={inputValue} onChange={handleInputChange}></input>\n          </form> \n          </div>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}","\n\nexport  const getGifs=async(category)=>{\n    const url=`https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(category)}&api_key=hZPt5qG1klvSQ1rRLs3vXHkbRMDIyL8g`;\n    const res= await fetch(url);\n    const {data}= await res.json();\n    \n    const gifs=data.map(img=>{\n           return{\n               id:img.id,\n               title:img.title,\n               url:img.images?.downsized_medium.url}\n            })\n            \n     return gifs;\n    \n    }\n     \n","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n   // console.log({id,title,url});\n    return (\n        <div className=\"card animate__fadeIn\">\n           <img src={url} alt={title}/> \n           <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\n\nexport const GifGrid = ({category}) => {\n   \n\n const {data:images,loading} = useFetchGifs(category);\n\n\n\n    return (<> {/* = <div></div> */}\n    <h3>{category}</h3>  \n     {loading}\n    <div className=\"card-grid\">\n            \n    {images.map(img =>( /* en vez de img{id,title}no se pone el img.*/\n        <GifGridItem key={img.id} {...img}/>\n        ))\n        }\n            </div> \n        </>\n    )\n}\n","import { useState,useEffect } from \"react\"\nimport {getGifs} from \"../helpers\"  \n\nexport  const useFetchGifs = (category) => {\n\n const [state, setState] = useState({\n    data:[],\n    loading:true\n  });\n          //useEffect hace que la funciÃ³n se ejecute cuando el componente es renderizado por primera vez\n    useEffect( ()=>{\n       getGifs(category)\n       .then(images=>{\n           setState({\n               data:images,\n               loading:true\n            });\n     })\n    },[category]) ;\n\nreturn state;  //state ) {data:[], loading:true}\n}\n\n","import React ,{useState} from 'react'\nimport { AddCategory } from './componentes/AddCategory'\nimport { GifGrid } from './componentes/GifGrid'\n\nexport const GEApp = () => {\n\n    const [categories, setCategories]=useState([\"One Piece\"])\n/* const handleApp=()=>{\n   //setCategories([...categories,\"7Seeds\"])\n   setCategories(newCategories=>[...newCategories,\"7Seeds\"])\n} <button onClick={handleApp}>Agregar</button>*/\n return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n\n   <ul>\n    { categories.map(category =>\n     <GifGrid key={category} category={category}></GifGrid>)\n    }\n   </ul>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GEApp } from './GEApp'\nimport './index.css';\n\nReactDOM.render( <GEApp/> ,\n    document.getElementById('root')\n);\n// GifExpertApp"],"sourceRoot":""}